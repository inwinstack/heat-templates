---

heat_template_version: ocata
description: A template to deploy the Kubernetes cluster
parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
  master_image:
    type: string
    description: Image used for the master
  node_image:
    type: string
    description: Image used for the node
  master_flavor:
    type: string
    label: Master VM Flavor
    description: Flavor used by the masters
  node_flavor:
    type: string
    label: Node VM Flavor
    description: Flavor used by the nodes
  private_net:
    type: string
    label: Private Network Name
    description: Network used by the servers
  public_net:
    type: string
    label: Public(External) Network Name
    description: Public IP used by the servers
  kube_version:
    type: string
    description: "Kubernetes version"
    default: 1.13.5
    constraints:
      - allowed_values:
        - 1.13.5
  kube_network:
    type: string
    label: Kubernetes Network Plugin
    description: "Kubernetes Pod network plugin."
    default: flannel
    constraints:
      - allowed_values:
        - flannel
  kube_bootstrap_token:
    type: string
    label: Kubernetes TLS Bootstrap Token
    description: "Kubernetes bootstrap token"
    default: "b0f7b8.8d1767876297d85c"
  kube_node_count:
    type: string
    label: Number of minion for Kubernetes
    description: "Number of node for Kubernetes"
    default: 2

resources:
  prefix:
    type: OS::Heat::TestResource
    properties:
      value: { get_param: "OS::stack_name" }
  
  kube_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: "%prefix%-kube_security_group"
          params:
            "%prefix%": { get_attr: [prefix, output] }
      description: Base security group for Kubernetes node
      rules:
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6
        - protocol: icmp
        - protocol: tcp
          port_range_min: 6443
          port_range_max: 6443
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 10250
          port_range_max: 10250
        - protocol: udp
          port_range_min: 8472
          port_range_max: 8472

  kubeadm_init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: kube_version
        - name: bootstrap_token
        - name: network_plugin
      group: script
      config: |
        #!/bin/bash
        set -eux
        sudo kubeadm init \
               --pod-network-cidr=10.244.0.0/16 \
               --token ${bootstrap_token} \
               --kubernetes-version ${kube_version}

        sudo mkdir ~/.kube 
        sudo cp -rp /etc/kubernetes/admin.conf ~/.kube/config
        sudo kubectl apply -f /opt/${network_plugin}.yml
    
  run_kubeadm_init:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        kube_version: { get_param: kube_version }
        bootstrap_token: { get_param: kube_bootstrap_token }
        network_plugin: { get_param: kube_network }
      config:
        get_resource: kubeadm_init_config
      server:
        get_resource: k8s_master_node

  run_join_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - path: "/opt/k8s/join"
            permissions: "0700"
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  set -ux
                  sudo kubeadm join --token %bootstrap_token% \
                         %master_ip%:6443 \
                         --discovery-token-unsafe-skip-ca-verification
                params:
                  "%bootstrap_token%": { get_param: kube_bootstrap_token }
                  "%master_ip%": { get_attr: [k8s_master_node, first_address] }
        runcmd:
          - ./opt/k8s/join

  k8s_master_node:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-master"
          params:
            "%prefix%": { get_attr: [prefix, output] }
      image: { get_param: master_image }
      key_name: { get_param: key_name }
      flavor: { get_param: master_flavor }
      networks:
      - network: { get_param: private_net }
      security_groups:
      - get_resource: kube_security_group
      user_data_format: SOFTWARE_CONFIG
  
  k8s_nodes:
    depends_on:
    - k8s_master_node
    - run_kubeadm_init
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: kube_node_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: "%prefix%-node-%index%"
              params:
                "%prefix%": { get_attr: [prefix, output] }
          image: { get_param: node_image }
          key_name: { get_param: key_name }
          flavor: { get_param: node_flavor }
          networks:
          - network: { get_param: private_net }
          security_groups:
          - get_resource: kube_security_group
          user_data_format: RAW
          user_data: { get_resource: run_join_config }
  
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: k8s_master_node }

outputs:
  kube_apiserver_addr:
    description: Kubernetes API Server Address
    value:
      str_replace:
        template: https://host:6443
        params:
          host: { get_attr: [floating_ip, floating_ip_address] }
  master_ip:
    description: IP address of master
    value: { get_attr: [k8s_master_node, first_address] }
  node_ips:
    description: IP address of nodes
    value: { get_attr: [k8s_nodes, first_address] }
  floating_ip:
    description: Floating IP of master
    value: { get_attr: [floating_ip, floating_ip_address] }